// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HandleData.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::recsys;

class HandleDataHandler : virtual public HandleDataIf {
 public:
  HandleDataHandler() {
    // Your initialization goes here
  }

  void import_entities(std::string& _return, const std::string& entityJson) {
    // Your implementation goes here
    printf("import_entities\n");
  }

  void add_entity(std::string& _return, const std::string& entityJson) {
    // Your implementation goes here
    printf("add_entity\n");
  }

  void add_activity(std::string& _return, const std::string& activityJson) {
    // Your implementation goes here
    printf("add_activity\n");
  }

  void get_recommend_list(std::string& _return, const std::string& userId) {
    // Your implementation goes here
    printf("get_recommend_list\n");
  }

};

//int main(int argc, char **argv) {
//  int port = 9090;
//  shared_ptr<HandleDataHandler> handler(new HandleDataHandler());
//  shared_ptr<TProcessor> processor(new HandleDataProcessor(handler));
//  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
//  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
//  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
//
//  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
//  server.serve();
//  return 0;
//}

