// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "RecEngine.h"
#include "recsys/data/Entity.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace ::recsys::thrift;
using namespace recsys;

class RecEngineHandler: virtual public RecEngineIf {
protected:
	class DataHostClientWrapper {
	protected:
		string m_host;
		int m_port;
		/// used by thrift client
		boost::shared_ptr<TTransport> m_socket;
		boost::shared_ptr<TTransport> m_transport;
		boost::shared_ptr<TProtocol> m_protocol;
		rt::DataHostClient m_client;
	public:
		DataHostClientWrapper(string const& host, int port) :
				m_host(host), m_port(port), m_socket(
						new TSocket(m_host, m_port)), m_transport(
						new TBufferedTransport(m_socket)), m_protocol(
						new TBinaryProtocol(m_transport)), m_client(m_protocol) {
		}
	};
protected:
	shared_ptr<DataHostClientWrapper> m_datahost_client_wrapper_ptr;
public:
	RecEngineHandler() {
		// Your initialization goes here
	}

	void init_data_host_client(string const& host, int port){
		m_datahost_client_wrapper_ptr = shared_ptr<DataHostClientWrapper>(new DataHostClientWrapper(host,port));
	}

	void get_recommendation(std::vector<Recommendation> & _return,
			const std::string& userId) {
		// Your implementation goes here
		/// first get all the interactions about the user
		try {
			m_datahost_client_wrapper_ptr->m_transport->open();
			cout
					<< "############## retrieve user interacts from data host  ##############"
					<< endl;
			timer t;
			map<int8_t, vector<Interact> > entityInteracts;
			m_datahost_client_wrapper_ptr->m_client.query_entity_interacts(entityInteracts,userId,Entity::ENT_USER);

			//// now do t
			m_transport->close();
		} catch (TException &tx) {
			printf("ERROR: %s\n", tx.what());
		}
		printf("get_recommendation\n");
	}

};

int main(int argc, char **argv) {
	int port = 9090;
	shared_ptr<RecEngineHandler> handler(new RecEngineHandler());
	shared_ptr<TProcessor> processor(new RecEngineProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(
			new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory,
			protocolFactory);
	server.serve();
	return 0;
}

