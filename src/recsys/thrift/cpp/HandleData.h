/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HandleData_H
#define HandleData_H

#include <thrift/TDispatchProcessor.h>
#include "data_types.h"

namespace recsys { namespace thrift {

class HandleDataIf {
 public:
  virtual ~HandleDataIf() {}
  virtual void add_entity(std::string& _return, const std::string& entityJson) = 0;
  virtual void add_interaction(std::string& _return, const std::string& interactionJson) = 0;
  virtual void get_recommend_list(std::string& _return, const std::string& userId) = 0;
  virtual void get_dataset(Dataset& _return, const DSType::type dsType) = 0;
};

class HandleDataIfFactory {
 public:
  typedef HandleDataIf Handler;

  virtual ~HandleDataIfFactory() {}

  virtual HandleDataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HandleDataIf* /* handler */) = 0;
};

class HandleDataIfSingletonFactory : virtual public HandleDataIfFactory {
 public:
  HandleDataIfSingletonFactory(const boost::shared_ptr<HandleDataIf>& iface) : iface_(iface) {}
  virtual ~HandleDataIfSingletonFactory() {}

  virtual HandleDataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HandleDataIf* /* handler */) {}

 protected:
  boost::shared_ptr<HandleDataIf> iface_;
};

class HandleDataNull : virtual public HandleDataIf {
 public:
  virtual ~HandleDataNull() {}
  void add_entity(std::string& /* _return */, const std::string& /* entityJson */) {
    return;
  }
  void add_interaction(std::string& /* _return */, const std::string& /* interactionJson */) {
    return;
  }
  void get_recommend_list(std::string& /* _return */, const std::string& /* userId */) {
    return;
  }
  void get_dataset(Dataset& /* _return */, const DSType::type /* dsType */) {
    return;
  }
};

typedef struct _HandleData_add_entity_args__isset {
  _HandleData_add_entity_args__isset() : entityJson(false) {}
  bool entityJson;
} _HandleData_add_entity_args__isset;

class HandleData_add_entity_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  HandleData_add_entity_args() : entityJson() {
  }

  virtual ~HandleData_add_entity_args() throw() {}

  std::string entityJson;

  _HandleData_add_entity_args__isset __isset;

  void __set_entityJson(const std::string& val) {
    entityJson = val;
  }

  bool operator == (const HandleData_add_entity_args & rhs) const
  {
    if (!(entityJson == rhs.entityJson))
      return false;
    return true;
  }
  bool operator != (const HandleData_add_entity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleData_add_entity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandleData_add_entity_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~HandleData_add_entity_pargs() throw() {}

  const std::string* entityJson;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandleData_add_entity_result__isset {
  _HandleData_add_entity_result__isset() : success(false) {}
  bool success;
} _HandleData_add_entity_result__isset;

class HandleData_add_entity_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  HandleData_add_entity_result() : success() {
  }

  virtual ~HandleData_add_entity_result() throw() {}

  std::string success;

  _HandleData_add_entity_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const HandleData_add_entity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandleData_add_entity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleData_add_entity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandleData_add_entity_presult__isset {
  _HandleData_add_entity_presult__isset() : success(false) {}
  bool success;
} _HandleData_add_entity_presult__isset;

class HandleData_add_entity_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~HandleData_add_entity_presult() throw() {}

  std::string* success;

  _HandleData_add_entity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HandleData_add_interaction_args__isset {
  _HandleData_add_interaction_args__isset() : interactionJson(false) {}
  bool interactionJson;
} _HandleData_add_interaction_args__isset;

class HandleData_add_interaction_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  HandleData_add_interaction_args() : interactionJson() {
  }

  virtual ~HandleData_add_interaction_args() throw() {}

  std::string interactionJson;

  _HandleData_add_interaction_args__isset __isset;

  void __set_interactionJson(const std::string& val) {
    interactionJson = val;
  }

  bool operator == (const HandleData_add_interaction_args & rhs) const
  {
    if (!(interactionJson == rhs.interactionJson))
      return false;
    return true;
  }
  bool operator != (const HandleData_add_interaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleData_add_interaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandleData_add_interaction_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~HandleData_add_interaction_pargs() throw() {}

  const std::string* interactionJson;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandleData_add_interaction_result__isset {
  _HandleData_add_interaction_result__isset() : success(false) {}
  bool success;
} _HandleData_add_interaction_result__isset;

class HandleData_add_interaction_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  HandleData_add_interaction_result() : success() {
  }

  virtual ~HandleData_add_interaction_result() throw() {}

  std::string success;

  _HandleData_add_interaction_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const HandleData_add_interaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandleData_add_interaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleData_add_interaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandleData_add_interaction_presult__isset {
  _HandleData_add_interaction_presult__isset() : success(false) {}
  bool success;
} _HandleData_add_interaction_presult__isset;

class HandleData_add_interaction_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~HandleData_add_interaction_presult() throw() {}

  std::string* success;

  _HandleData_add_interaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HandleData_get_recommend_list_args__isset {
  _HandleData_get_recommend_list_args__isset() : userId(false) {}
  bool userId;
} _HandleData_get_recommend_list_args__isset;

class HandleData_get_recommend_list_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  HandleData_get_recommend_list_args() : userId() {
  }

  virtual ~HandleData_get_recommend_list_args() throw() {}

  std::string userId;

  _HandleData_get_recommend_list_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  bool operator == (const HandleData_get_recommend_list_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const HandleData_get_recommend_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleData_get_recommend_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandleData_get_recommend_list_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~HandleData_get_recommend_list_pargs() throw() {}

  const std::string* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandleData_get_recommend_list_result__isset {
  _HandleData_get_recommend_list_result__isset() : success(false) {}
  bool success;
} _HandleData_get_recommend_list_result__isset;

class HandleData_get_recommend_list_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  HandleData_get_recommend_list_result() : success() {
  }

  virtual ~HandleData_get_recommend_list_result() throw() {}

  std::string success;

  _HandleData_get_recommend_list_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const HandleData_get_recommend_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandleData_get_recommend_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleData_get_recommend_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandleData_get_recommend_list_presult__isset {
  _HandleData_get_recommend_list_presult__isset() : success(false) {}
  bool success;
} _HandleData_get_recommend_list_presult__isset;

class HandleData_get_recommend_list_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~HandleData_get_recommend_list_presult() throw() {}

  std::string* success;

  _HandleData_get_recommend_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HandleData_get_dataset_args__isset {
  _HandleData_get_dataset_args__isset() : dsType(false) {}
  bool dsType;
} _HandleData_get_dataset_args__isset;

class HandleData_get_dataset_args {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  HandleData_get_dataset_args() : dsType((DSType::type)0) {
  }

  virtual ~HandleData_get_dataset_args() throw() {}

  DSType::type dsType;

  _HandleData_get_dataset_args__isset __isset;

  void __set_dsType(const DSType::type val) {
    dsType = val;
  }

  bool operator == (const HandleData_get_dataset_args & rhs) const
  {
    if (!(dsType == rhs.dsType))
      return false;
    return true;
  }
  bool operator != (const HandleData_get_dataset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleData_get_dataset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandleData_get_dataset_pargs {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};


  virtual ~HandleData_get_dataset_pargs() throw() {}

  const DSType::type* dsType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandleData_get_dataset_result__isset {
  _HandleData_get_dataset_result__isset() : success(false) {}
  bool success;
} _HandleData_get_dataset_result__isset;

class HandleData_get_dataset_result {
 public:

  static const char* ascii_fingerprint; // = "13C6067932A06B0CB2398349A6F23B82";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0xC6,0x06,0x79,0x32,0xA0,0x6B,0x0C,0xB2,0x39,0x83,0x49,0xA6,0xF2,0x3B,0x82};

  HandleData_get_dataset_result() {
  }

  virtual ~HandleData_get_dataset_result() throw() {}

  Dataset success;

  _HandleData_get_dataset_result__isset __isset;

  void __set_success(const Dataset& val) {
    success = val;
  }

  bool operator == (const HandleData_get_dataset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandleData_get_dataset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleData_get_dataset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandleData_get_dataset_presult__isset {
  _HandleData_get_dataset_presult__isset() : success(false) {}
  bool success;
} _HandleData_get_dataset_presult__isset;

class HandleData_get_dataset_presult {
 public:

  static const char* ascii_fingerprint; // = "13C6067932A06B0CB2398349A6F23B82";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0xC6,0x06,0x79,0x32,0xA0,0x6B,0x0C,0xB2,0x39,0x83,0x49,0xA6,0xF2,0x3B,0x82};


  virtual ~HandleData_get_dataset_presult() throw() {}

  Dataset* success;

  _HandleData_get_dataset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HandleDataClient : virtual public HandleDataIf {
 public:
  HandleDataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HandleDataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_entity(std::string& _return, const std::string& entityJson);
  void send_add_entity(const std::string& entityJson);
  void recv_add_entity(std::string& _return);
  void add_interaction(std::string& _return, const std::string& interactionJson);
  void send_add_interaction(const std::string& interactionJson);
  void recv_add_interaction(std::string& _return);
  void get_recommend_list(std::string& _return, const std::string& userId);
  void send_get_recommend_list(const std::string& userId);
  void recv_get_recommend_list(std::string& _return);
  void get_dataset(Dataset& _return, const DSType::type dsType);
  void send_get_dataset(const DSType::type dsType);
  void recv_get_dataset(Dataset& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HandleDataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HandleDataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HandleDataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_entity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_interaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_recommend_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_dataset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HandleDataProcessor(boost::shared_ptr<HandleDataIf> iface) :
    iface_(iface) {
    processMap_["add_entity"] = &HandleDataProcessor::process_add_entity;
    processMap_["add_interaction"] = &HandleDataProcessor::process_add_interaction;
    processMap_["get_recommend_list"] = &HandleDataProcessor::process_get_recommend_list;
    processMap_["get_dataset"] = &HandleDataProcessor::process_get_dataset;
  }

  virtual ~HandleDataProcessor() {}
};

class HandleDataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HandleDataProcessorFactory(const ::boost::shared_ptr< HandleDataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HandleDataIfFactory > handlerFactory_;
};

class HandleDataMultiface : virtual public HandleDataIf {
 public:
  HandleDataMultiface(std::vector<boost::shared_ptr<HandleDataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HandleDataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HandleDataIf> > ifaces_;
  HandleDataMultiface() {}
  void add(boost::shared_ptr<HandleDataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add_entity(std::string& _return, const std::string& entityJson) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_entity(_return, entityJson);
    }
    ifaces_[i]->add_entity(_return, entityJson);
    return;
  }

  void add_interaction(std::string& _return, const std::string& interactionJson) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_interaction(_return, interactionJson);
    }
    ifaces_[i]->add_interaction(_return, interactionJson);
    return;
  }

  void get_recommend_list(std::string& _return, const std::string& userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_recommend_list(_return, userId);
    }
    ifaces_[i]->get_recommend_list(_return, userId);
    return;
  }

  void get_dataset(Dataset& _return, const DSType::type dsType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_dataset(_return, dsType);
    }
    ifaces_[i]->get_dataset(_return, dsType);
    return;
  }

};

}} // namespace

#endif
