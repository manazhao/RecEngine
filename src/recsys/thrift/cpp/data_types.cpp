/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "data_types.h"

#include <algorithm>

namespace recsys { namespace thrift {

const char* Interact::ascii_fingerprint = "BEC7CE3B928AEDD0B9882551A06B6866";
const uint8_t Interact::binary_fingerprint[16] = {0xBE,0xC7,0xCE,0x3B,0x92,0x8A,0xED,0xD0,0xB9,0x88,0x25,0x51,0xA0,0x6B,0x68,0x66};

uint32_t Interact::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ent_id);
          this->__isset.ent_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->ent_type);
          this->__isset.ent_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->int_val);
          this->__isset.int_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Interact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Interact");

  xfer += oprot->writeFieldBegin("ent_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->ent_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ent_type", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->ent_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("int_val", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->int_val);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Interact &a, Interact &b) {
  using ::std::swap;
  swap(a.ent_id, b.ent_id);
  swap(a.ent_type, b.ent_type);
  swap(a.int_val, b.int_val);
  swap(a.__isset, b.__isset);
}

}} // namespace
