/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef data_TYPES_H
#define data_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace recsys { namespace thrift {

typedef struct _Interact__isset {
  _Interact__isset() : ent_id(false), ent_type(false), int_val(false) {}
  bool ent_id;
  bool ent_type;
  bool int_val;
} _Interact__isset;

class Interact {
 public:

  static const char* ascii_fingerprint; // = "BEC7CE3B928AEDD0B9882551A06B6866";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xC7,0xCE,0x3B,0x92,0x8A,0xED,0xD0,0xB9,0x88,0x25,0x51,0xA0,0x6B,0x68,0x66};

  Interact() : ent_id(0), ent_type(0), int_val() {
  }

  virtual ~Interact() throw() {}

  int64_t ent_id;
  int8_t ent_type;
  std::string int_val;

  _Interact__isset __isset;

  void __set_ent_id(const int64_t val) {
    ent_id = val;
  }

  void __set_ent_type(const int8_t val) {
    ent_type = val;
  }

  void __set_int_val(const std::string& val) {
    int_val = val;
  }

  bool operator == (const Interact & rhs) const
  {
    if (!(ent_id == rhs.ent_id))
      return false;
    if (!(ent_type == rhs.ent_type))
      return false;
    if (!(int_val == rhs.int_val))
      return false;
    return true;
  }
  bool operator != (const Interact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Interact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Interact &a, Interact &b);

}} // namespace

#endif
