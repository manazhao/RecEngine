/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataHost_H
#define DataHost_H

#include <thrift/TDispatchProcessor.h>
#include "data_types.h"

namespace recsys { namespace thrift {

class DataHostIf {
 public:
  virtual ~DataHostIf() {}
  virtual void index_interaction(Response& _return, const std::string& fromId, const int8_t fromType, const std::string& toId, const int8_t toType, const int8_t type, const double val) = 0;
  virtual void query_entity_interacts(std::map<int8_t, std::vector<Interact> > & _return, const int64_t id) = 0;
  virtual void query_entity_name(std::string& _return, const int64_t id) = 0;
  virtual void query_entity_names(std::vector<std::string> & _return, const std::vector<int64_t> & idList) = 0;
  virtual int64_t query_entity_id(const std::string& name, const int8_t type) = 0;
  virtual void get_dataset(Dataset& _return, const DSType::type dsType) = 0;
};

class DataHostIfFactory {
 public:
  typedef DataHostIf Handler;

  virtual ~DataHostIfFactory() {}

  virtual DataHostIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataHostIf* /* handler */) = 0;
};

class DataHostIfSingletonFactory : virtual public DataHostIfFactory {
 public:
  DataHostIfSingletonFactory(const boost::shared_ptr<DataHostIf>& iface) : iface_(iface) {}
  virtual ~DataHostIfSingletonFactory() {}

  virtual DataHostIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataHostIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataHostIf> iface_;
};

class DataHostNull : virtual public DataHostIf {
 public:
  virtual ~DataHostNull() {}
  void index_interaction(Response& /* _return */, const std::string& /* fromId */, const int8_t /* fromType */, const std::string& /* toId */, const int8_t /* toType */, const int8_t /* type */, const double /* val */) {
    return;
  }
  void query_entity_interacts(std::map<int8_t, std::vector<Interact> > & /* _return */, const int64_t /* id */) {
    return;
  }
  void query_entity_name(std::string& /* _return */, const int64_t /* id */) {
    return;
  }
  void query_entity_names(std::vector<std::string> & /* _return */, const std::vector<int64_t> & /* idList */) {
    return;
  }
  int64_t query_entity_id(const std::string& /* name */, const int8_t /* type */) {
    int64_t _return = 0;
    return _return;
  }
  void get_dataset(Dataset& /* _return */, const DSType::type /* dsType */) {
    return;
  }
};

typedef struct _DataHost_index_interaction_args__isset {
  _DataHost_index_interaction_args__isset() : fromId(false), fromType(false), toId(false), toType(false), type(false), val(false) {}
  bool fromId;
  bool fromType;
  bool toId;
  bool toType;
  bool type;
  bool val;
} _DataHost_index_interaction_args__isset;

class DataHost_index_interaction_args {
 public:

  static const char* ascii_fingerprint; // = "348EDE5F22B35256BA2F606F133CB209";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x8E,0xDE,0x5F,0x22,0xB3,0x52,0x56,0xBA,0x2F,0x60,0x6F,0x13,0x3C,0xB2,0x09};

  DataHost_index_interaction_args() : fromId(), fromType(0), toId(), toType(0), type(0), val(0) {
  }

  virtual ~DataHost_index_interaction_args() throw() {}

  std::string fromId;
  int8_t fromType;
  std::string toId;
  int8_t toType;
  int8_t type;
  double val;

  _DataHost_index_interaction_args__isset __isset;

  void __set_fromId(const std::string& val) {
    fromId = val;
  }

  void __set_fromType(const int8_t val) {
    fromType = val;
  }

  void __set_toId(const std::string& val) {
    toId = val;
  }

  void __set_toType(const int8_t val) {
    toType = val;
  }

  void __set_type(const int8_t val) {
    type = val;
  }

  void __set_val(const double val) {
    val = val;
  }

  bool operator == (const DataHost_index_interaction_args & rhs) const
  {
    if (!(fromId == rhs.fromId))
      return false;
    if (!(fromType == rhs.fromType))
      return false;
    if (!(toId == rhs.toId))
      return false;
    if (!(toType == rhs.toType))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(val == rhs.val))
      return false;
    return true;
  }
  bool operator != (const DataHost_index_interaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_index_interaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataHost_index_interaction_pargs {
 public:

  static const char* ascii_fingerprint; // = "348EDE5F22B35256BA2F606F133CB209";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x8E,0xDE,0x5F,0x22,0xB3,0x52,0x56,0xBA,0x2F,0x60,0x6F,0x13,0x3C,0xB2,0x09};


  virtual ~DataHost_index_interaction_pargs() throw() {}

  const std::string* fromId;
  const int8_t* fromType;
  const std::string* toId;
  const int8_t* toType;
  const int8_t* type;
  const double* val;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_index_interaction_result__isset {
  _DataHost_index_interaction_result__isset() : success(false) {}
  bool success;
} _DataHost_index_interaction_result__isset;

class DataHost_index_interaction_result {
 public:

  static const char* ascii_fingerprint; // = "9C1BA839512A4F2BC86BC780CA8C3AD8";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x1B,0xA8,0x39,0x51,0x2A,0x4F,0x2B,0xC8,0x6B,0xC7,0x80,0xCA,0x8C,0x3A,0xD8};

  DataHost_index_interaction_result() {
  }

  virtual ~DataHost_index_interaction_result() throw() {}

  Response success;

  _DataHost_index_interaction_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const DataHost_index_interaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataHost_index_interaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_index_interaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_index_interaction_presult__isset {
  _DataHost_index_interaction_presult__isset() : success(false) {}
  bool success;
} _DataHost_index_interaction_presult__isset;

class DataHost_index_interaction_presult {
 public:

  static const char* ascii_fingerprint; // = "9C1BA839512A4F2BC86BC780CA8C3AD8";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x1B,0xA8,0x39,0x51,0x2A,0x4F,0x2B,0xC8,0x6B,0xC7,0x80,0xCA,0x8C,0x3A,0xD8};


  virtual ~DataHost_index_interaction_presult() throw() {}

  Response* success;

  _DataHost_index_interaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataHost_query_entity_interacts_args__isset {
  _DataHost_query_entity_interacts_args__isset() : id(false) {}
  bool id;
} _DataHost_query_entity_interacts_args__isset;

class DataHost_query_entity_interacts_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  DataHost_query_entity_interacts_args() : id(0) {
  }

  virtual ~DataHost_query_entity_interacts_args() throw() {}

  int64_t id;

  _DataHost_query_entity_interacts_args__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  bool operator == (const DataHost_query_entity_interacts_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const DataHost_query_entity_interacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_query_entity_interacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataHost_query_entity_interacts_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~DataHost_query_entity_interacts_pargs() throw() {}

  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_query_entity_interacts_result__isset {
  _DataHost_query_entity_interacts_result__isset() : success(false) {}
  bool success;
} _DataHost_query_entity_interacts_result__isset;

class DataHost_query_entity_interacts_result {
 public:

  static const char* ascii_fingerprint; // = "DD17DF9F44F4FE032B3C1C27410151D5";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x17,0xDF,0x9F,0x44,0xF4,0xFE,0x03,0x2B,0x3C,0x1C,0x27,0x41,0x01,0x51,0xD5};

  DataHost_query_entity_interacts_result() {
  }

  virtual ~DataHost_query_entity_interacts_result() throw() {}

  std::map<int8_t, std::vector<Interact> >  success;

  _DataHost_query_entity_interacts_result__isset __isset;

  void __set_success(const std::map<int8_t, std::vector<Interact> > & val) {
    success = val;
  }

  bool operator == (const DataHost_query_entity_interacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataHost_query_entity_interacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_query_entity_interacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_query_entity_interacts_presult__isset {
  _DataHost_query_entity_interacts_presult__isset() : success(false) {}
  bool success;
} _DataHost_query_entity_interacts_presult__isset;

class DataHost_query_entity_interacts_presult {
 public:

  static const char* ascii_fingerprint; // = "DD17DF9F44F4FE032B3C1C27410151D5";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x17,0xDF,0x9F,0x44,0xF4,0xFE,0x03,0x2B,0x3C,0x1C,0x27,0x41,0x01,0x51,0xD5};


  virtual ~DataHost_query_entity_interacts_presult() throw() {}

  std::map<int8_t, std::vector<Interact> > * success;

  _DataHost_query_entity_interacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataHost_query_entity_name_args__isset {
  _DataHost_query_entity_name_args__isset() : id(false) {}
  bool id;
} _DataHost_query_entity_name_args__isset;

class DataHost_query_entity_name_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  DataHost_query_entity_name_args() : id(0) {
  }

  virtual ~DataHost_query_entity_name_args() throw() {}

  int64_t id;

  _DataHost_query_entity_name_args__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  bool operator == (const DataHost_query_entity_name_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const DataHost_query_entity_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_query_entity_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataHost_query_entity_name_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~DataHost_query_entity_name_pargs() throw() {}

  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_query_entity_name_result__isset {
  _DataHost_query_entity_name_result__isset() : success(false) {}
  bool success;
} _DataHost_query_entity_name_result__isset;

class DataHost_query_entity_name_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DataHost_query_entity_name_result() : success() {
  }

  virtual ~DataHost_query_entity_name_result() throw() {}

  std::string success;

  _DataHost_query_entity_name_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DataHost_query_entity_name_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataHost_query_entity_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_query_entity_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_query_entity_name_presult__isset {
  _DataHost_query_entity_name_presult__isset() : success(false) {}
  bool success;
} _DataHost_query_entity_name_presult__isset;

class DataHost_query_entity_name_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DataHost_query_entity_name_presult() throw() {}

  std::string* success;

  _DataHost_query_entity_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataHost_query_entity_names_args__isset {
  _DataHost_query_entity_names_args__isset() : idList(false) {}
  bool idList;
} _DataHost_query_entity_names_args__isset;

class DataHost_query_entity_names_args {
 public:

  static const char* ascii_fingerprint; // = "E49D7D1A9013CC81CD0F69D631EF82E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

  DataHost_query_entity_names_args() {
  }

  virtual ~DataHost_query_entity_names_args() throw() {}

  std::vector<int64_t>  idList;

  _DataHost_query_entity_names_args__isset __isset;

  void __set_idList(const std::vector<int64_t> & val) {
    idList = val;
  }

  bool operator == (const DataHost_query_entity_names_args & rhs) const
  {
    if (!(idList == rhs.idList))
      return false;
    return true;
  }
  bool operator != (const DataHost_query_entity_names_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_query_entity_names_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataHost_query_entity_names_pargs {
 public:

  static const char* ascii_fingerprint; // = "E49D7D1A9013CC81CD0F69D631EF82E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};


  virtual ~DataHost_query_entity_names_pargs() throw() {}

  const std::vector<int64_t> * idList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_query_entity_names_result__isset {
  _DataHost_query_entity_names_result__isset() : success(false) {}
  bool success;
} _DataHost_query_entity_names_result__isset;

class DataHost_query_entity_names_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  DataHost_query_entity_names_result() {
  }

  virtual ~DataHost_query_entity_names_result() throw() {}

  std::vector<std::string>  success;

  _DataHost_query_entity_names_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const DataHost_query_entity_names_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataHost_query_entity_names_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_query_entity_names_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_query_entity_names_presult__isset {
  _DataHost_query_entity_names_presult__isset() : success(false) {}
  bool success;
} _DataHost_query_entity_names_presult__isset;

class DataHost_query_entity_names_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~DataHost_query_entity_names_presult() throw() {}

  std::vector<std::string> * success;

  _DataHost_query_entity_names_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataHost_query_entity_id_args__isset {
  _DataHost_query_entity_id_args__isset() : name(false), type(false) {}
  bool name;
  bool type;
} _DataHost_query_entity_id_args__isset;

class DataHost_query_entity_id_args {
 public:

  static const char* ascii_fingerprint; // = "EAF0A51FCCA478B8CA6B466F7A29473A";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0xF0,0xA5,0x1F,0xCC,0xA4,0x78,0xB8,0xCA,0x6B,0x46,0x6F,0x7A,0x29,0x47,0x3A};

  DataHost_query_entity_id_args() : name(), type(0) {
  }

  virtual ~DataHost_query_entity_id_args() throw() {}

  std::string name;
  int8_t type;

  _DataHost_query_entity_id_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_type(const int8_t val) {
    type = val;
  }

  bool operator == (const DataHost_query_entity_id_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const DataHost_query_entity_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_query_entity_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataHost_query_entity_id_pargs {
 public:

  static const char* ascii_fingerprint; // = "EAF0A51FCCA478B8CA6B466F7A29473A";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0xF0,0xA5,0x1F,0xCC,0xA4,0x78,0xB8,0xCA,0x6B,0x46,0x6F,0x7A,0x29,0x47,0x3A};


  virtual ~DataHost_query_entity_id_pargs() throw() {}

  const std::string* name;
  const int8_t* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_query_entity_id_result__isset {
  _DataHost_query_entity_id_result__isset() : success(false) {}
  bool success;
} _DataHost_query_entity_id_result__isset;

class DataHost_query_entity_id_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  DataHost_query_entity_id_result() : success(0) {
  }

  virtual ~DataHost_query_entity_id_result() throw() {}

  int64_t success;

  _DataHost_query_entity_id_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const DataHost_query_entity_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataHost_query_entity_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_query_entity_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_query_entity_id_presult__isset {
  _DataHost_query_entity_id_presult__isset() : success(false) {}
  bool success;
} _DataHost_query_entity_id_presult__isset;

class DataHost_query_entity_id_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~DataHost_query_entity_id_presult() throw() {}

  int64_t* success;

  _DataHost_query_entity_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataHost_get_dataset_args__isset {
  _DataHost_get_dataset_args__isset() : dsType(false) {}
  bool dsType;
} _DataHost_get_dataset_args__isset;

class DataHost_get_dataset_args {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  DataHost_get_dataset_args() : dsType((DSType::type)0) {
  }

  virtual ~DataHost_get_dataset_args() throw() {}

  DSType::type dsType;

  _DataHost_get_dataset_args__isset __isset;

  void __set_dsType(const DSType::type val) {
    dsType = val;
  }

  bool operator == (const DataHost_get_dataset_args & rhs) const
  {
    if (!(dsType == rhs.dsType))
      return false;
    return true;
  }
  bool operator != (const DataHost_get_dataset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_get_dataset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataHost_get_dataset_pargs {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};


  virtual ~DataHost_get_dataset_pargs() throw() {}

  const DSType::type* dsType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_get_dataset_result__isset {
  _DataHost_get_dataset_result__isset() : success(false) {}
  bool success;
} _DataHost_get_dataset_result__isset;

class DataHost_get_dataset_result {
 public:

  static const char* ascii_fingerprint; // = "9474DE59E738FA6F126A024D54BE68F9";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0x74,0xDE,0x59,0xE7,0x38,0xFA,0x6F,0x12,0x6A,0x02,0x4D,0x54,0xBE,0x68,0xF9};

  DataHost_get_dataset_result() {
  }

  virtual ~DataHost_get_dataset_result() throw() {}

  Dataset success;

  _DataHost_get_dataset_result__isset __isset;

  void __set_success(const Dataset& val) {
    success = val;
  }

  bool operator == (const DataHost_get_dataset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataHost_get_dataset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataHost_get_dataset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataHost_get_dataset_presult__isset {
  _DataHost_get_dataset_presult__isset() : success(false) {}
  bool success;
} _DataHost_get_dataset_presult__isset;

class DataHost_get_dataset_presult {
 public:

  static const char* ascii_fingerprint; // = "9474DE59E738FA6F126A024D54BE68F9";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0x74,0xDE,0x59,0xE7,0x38,0xFA,0x6F,0x12,0x6A,0x02,0x4D,0x54,0xBE,0x68,0xF9};


  virtual ~DataHost_get_dataset_presult() throw() {}

  Dataset* success;

  _DataHost_get_dataset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataHostClient : virtual public DataHostIf {
 public:
  DataHostClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataHostClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void index_interaction(Response& _return, const std::string& fromId, const int8_t fromType, const std::string& toId, const int8_t toType, const int8_t type, const double val);
  void send_index_interaction(const std::string& fromId, const int8_t fromType, const std::string& toId, const int8_t toType, const int8_t type, const double val);
  void recv_index_interaction(Response& _return);
  void query_entity_interacts(std::map<int8_t, std::vector<Interact> > & _return, const int64_t id);
  void send_query_entity_interacts(const int64_t id);
  void recv_query_entity_interacts(std::map<int8_t, std::vector<Interact> > & _return);
  void query_entity_name(std::string& _return, const int64_t id);
  void send_query_entity_name(const int64_t id);
  void recv_query_entity_name(std::string& _return);
  void query_entity_names(std::vector<std::string> & _return, const std::vector<int64_t> & idList);
  void send_query_entity_names(const std::vector<int64_t> & idList);
  void recv_query_entity_names(std::vector<std::string> & _return);
  int64_t query_entity_id(const std::string& name, const int8_t type);
  void send_query_entity_id(const std::string& name, const int8_t type);
  int64_t recv_query_entity_id();
  void get_dataset(Dataset& _return, const DSType::type dsType);
  void send_get_dataset(const DSType::type dsType);
  void recv_get_dataset(Dataset& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataHostProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataHostIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataHostProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_index_interaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_entity_interacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_entity_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_entity_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_entity_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_dataset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataHostProcessor(boost::shared_ptr<DataHostIf> iface) :
    iface_(iface) {
    processMap_["index_interaction"] = &DataHostProcessor::process_index_interaction;
    processMap_["query_entity_interacts"] = &DataHostProcessor::process_query_entity_interacts;
    processMap_["query_entity_name"] = &DataHostProcessor::process_query_entity_name;
    processMap_["query_entity_names"] = &DataHostProcessor::process_query_entity_names;
    processMap_["query_entity_id"] = &DataHostProcessor::process_query_entity_id;
    processMap_["get_dataset"] = &DataHostProcessor::process_get_dataset;
  }

  virtual ~DataHostProcessor() {}
};

class DataHostProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataHostProcessorFactory(const ::boost::shared_ptr< DataHostIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataHostIfFactory > handlerFactory_;
};

class DataHostMultiface : virtual public DataHostIf {
 public:
  DataHostMultiface(std::vector<boost::shared_ptr<DataHostIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataHostMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataHostIf> > ifaces_;
  DataHostMultiface() {}
  void add(boost::shared_ptr<DataHostIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void index_interaction(Response& _return, const std::string& fromId, const int8_t fromType, const std::string& toId, const int8_t toType, const int8_t type, const double val) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->index_interaction(_return, fromId, fromType, toId, toType, type, val);
    }
    ifaces_[i]->index_interaction(_return, fromId, fromType, toId, toType, type, val);
    return;
  }

  void query_entity_interacts(std::map<int8_t, std::vector<Interact> > & _return, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_entity_interacts(_return, id);
    }
    ifaces_[i]->query_entity_interacts(_return, id);
    return;
  }

  void query_entity_name(std::string& _return, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_entity_name(_return, id);
    }
    ifaces_[i]->query_entity_name(_return, id);
    return;
  }

  void query_entity_names(std::vector<std::string> & _return, const std::vector<int64_t> & idList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_entity_names(_return, idList);
    }
    ifaces_[i]->query_entity_names(_return, idList);
    return;
  }

  int64_t query_entity_id(const std::string& name, const int8_t type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_entity_id(name, type);
    }
    return ifaces_[i]->query_entity_id(name, type);
  }

  void get_dataset(Dataset& _return, const DSType::type dsType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_dataset(_return, dsType);
    }
    ifaces_[i]->get_dataset(_return, dsType);
    return;
  }

};

}} // namespace

#endif
