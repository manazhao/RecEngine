// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DataHost.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::recsys::thrift;

class DataHostHandler : virtual public DataHostIf {
 public:
  DataHostHandler() {
    // Your initialization goes here
  }

  void index_interaction(Response& _return, const std::string& fromId, const int8_t fromType, const std::string& toId, const int8_t toType, const int8_t type, const double val) {
    // Your implementation goes here
    printf("index_interaction\n");
  }

  void query_entity_interacts(std::map<int8_t, std::vector<Interact> > & _return, const int64_t id) {
    // Your implementation goes here
    printf("query_entity_interacts\n");
  }

  void query_entity_name(std::string& _return, const int64_t id) {
    // Your implementation goes here
    printf("query_entity_name\n");
  }

  void query_entity_names(std::vector<std::string> & _return, const std::vector<int64_t> & idList) {
    // Your implementation goes here
    printf("query_entity_names\n");
  }

  int64_t query_entity_id(const std::string& name, const int8_t type) {
    // Your implementation goes here
    printf("query_entity_id\n");
  }

  void get_dataset(Dataset& _return, const DSType::type dsType) {
    // Your implementation goes here
    printf("get_dataset\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DataHostHandler> handler(new DataHostHandler());
  shared_ptr<TProcessor> processor(new DataHostProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

